plugins {
    id 'org.springframework.boot' version "$springBootVersion"
    id 'io.spring.dependency-management' version "$springDependencyManagementVersion"
    id 'idea'
}

allprojects {
    if (subprojects.size() > 0 && name != rootProject.name) return
    if (name == "documents" || projectDir.parentFile.name == "frontends") return

    version '1.0.0'

    apply from: "$rootDir/gradle/config/scripts/java.gradle"
    apply from: "$rootDir/gradle/config/scripts/junit.gradle"
    apply from: "$rootDir/gradle/config/scripts/style.gradle"
    apply from: "$rootDir/gradle/config/scripts/coverage.gradle"

    dependencies {
        implementation "com.google.guava:guava:$guavaVersion"
        implementation "org.apache.commons:commons-lang3:$commonsLang3Version"
        compileOnly "org.projectlombok:lombok:$lombokVersion"
        annotationProcessor "org.projectlombok:lombok:$lombokVersion"
        testCompileOnly "org.projectlombok:lombok:$lombokVersion"
        testAnnotationProcessor "org.projectlombok:lombok:$lombokVersion"
    }

    test.dependsOn(checkstyleMain)
}

subprojects {
    apply plugin: 'java-library'
}

dependencies {
    implementation('org.springframework.retry:spring-retry:1.3.1')
    implementation project(":users.gateways")
    implementation project(":domain.core")
    implementation("org.springframework.boot:spring-boot-starter")
    implementation("org.springframework.boot:spring-boot-actuator")
    implementation("org.springframework.boot:spring-boot-starter-web")
    implementation("org.springframework.boot:spring-boot-starter-aop")
    implementation('org.springframework.boot:spring-boot-starter-data-jdbc')
    implementation('org.springframework.boot:spring-boot-starter-validation')
    implementation("org.springframework.boot:spring-boot-starter-data-jpa")
    implementation("javax.validation:validation-api")
    implementation("com.h2database:h2:$h2Version")
    implementation('com.alibaba:fastjson:1.2.79')
    implementation("org.flywaydb:flyway-core:$flywaydbVersion")
    implementation("org.postgresql:postgresql:$postgresqlDriverVersion")
    testImplementation('org.testcontainers:junit-jupiter:1.16.3')
    testImplementation('org.testcontainers:postgresql:1.16.3')
    testImplementation("org.springframework.boot:spring-boot-starter-test")
    implementation("com.querydsl:querydsl-core:${querydslVersion}")
    implementation("com.querydsl:querydsl-jpa:${querydslVersion}")
    annotationProcessor("com.querydsl:querydsl-apt:${querydslVersion}:jpa",
            "org.hibernate.javax.persistence:hibernate-jpa-2.1-api:1.0.2.Final",
            "javax.annotation:javax.annotation-api:1.3.2",
            "org.projectlombok:lombok")
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    implementation("org.projectlombok:lombok:${lombokVersion}")
}

apply from: "$rootDir/gradle/config/scripts/coverage-all.gradle"
apply from: "./coverage.gradle"

apply from: "$rootDir/gradle/config/scripts/jib.gradle"

task initGit(type: Exec) {
    commandLine 'sh', "./scripts/setup-git.sh"
}
check.dependsOn(initGit)
